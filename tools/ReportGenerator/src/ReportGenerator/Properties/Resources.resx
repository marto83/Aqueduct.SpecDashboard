<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedCoverageInformationOfProperties" xml:space="preserve">
    <value>Added coverage information of {0}/{1} auto properties</value>
  </data>
  <data name="AddedCoverageInformationOfPropertiesOpenCover" xml:space="preserve">
    <value>Added coverage information of {0}/{1} auto properties to module '{2}'</value>
  </data>
  <data name="AddedCoverageInformationUnexecutedMethods" xml:space="preserve">
    <value>Added coverage information of {0}/{1} unexecuted methods</value>
  </data>
  <data name="AnalyzingClasses" xml:space="preserve">
    <value>Analyzing {0} classes</value>
  </data>
  <data name="Assemblies" xml:space="preserve">
    <value>Assemblies</value>
  </data>
  <data name="Assemblies2" xml:space="preserve">
    <value>Assemblies:</value>
  </data>
  <data name="Assembly" xml:space="preserve">
    <value>Assembly:</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Class:</value>
  </data>
  <data name="Classes" xml:space="preserve">
    <value>Classes:</value>
  </data>
  <data name="CollapseAllAssemblies" xml:space="preserve">
    <value>Collapse all assemblies</value>
  </data>
  <data name="CollapseExpandAssembly" xml:space="preserve">
    <value>Collapse/Expand assembly</value>
  </data>
  <data name="CoverableLines" xml:space="preserve">
    <value>Coverable lines:</value>
  </data>
  <data name="Coverage" xml:space="preserve">
    <value>Coverage</value>
  </data>
  <data name="Coverage2" xml:space="preserve">
    <value>Coverage:</value>
  </data>
  <data name="CoverageReport" xml:space="preserve">
    <value>Coverage Report</value>
  </data>
  <data name="CoveredLines" xml:space="preserve">
    <value>Covered lines:</value>
  </data>
  <data name="CreatingReport" xml:space="preserve">
    <value>Creating report {0}/{1} (Assembly: {2}, Class: {3})</value>
  </data>
  <data name="CreatingSummary" xml:space="preserve">
    <value>Creating summary</value>
  </data>
  <data name="CssNotSaved" xml:space="preserve">
    <value>CSS '{0}' could not be saved: {1}</value>
  </data>
  <data name="CurrentAssembly" xml:space="preserve">
    <value>Current Assembly: {0}</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="DetailsOfAssembly" xml:space="preserve">
    <value>Show details of assembly</value>
  </data>
  <data name="ErrorDuringReadingFile" xml:space="preserve">
    <value>Error during reading file '{0}': {1}</value>
  </data>
  <data name="ErrorDuringReadingReport" xml:space="preserve">
    <value>Error during reading report '{0}': {1}</value>
  </data>
  <data name="ExpandAllAssemblies" xml:space="preserve">
    <value>Expand all assemblies</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' does not exist (any more).</value>
  </data>
  <data name="Files" xml:space="preserve">
    <value>File(s)</value>
  </data>
  <data name="Files2" xml:space="preserve">
    <value>Files:</value>
  </data>
  <data name="Files3" xml:space="preserve">
    <value>File(s):</value>
  </data>
  <data name="GeneratedBy" xml:space="preserve">
    <value>Generated by:</value>
  </data>
  <data name="GeneratedOn" xml:space="preserve">
    <value>Generated on:</value>
  </data>
  <data name="IndexingClasses" xml:space="preserve">
    <value>Indexing classes in directory '{0}'</value>
  </data>
  <data name="InitiatingParser" xml:space="preserve">
    <value>Initiating parser for {0}</value>
  </data>
  <data name="InvalidFilter" xml:space="preserve">
    <value>The filter '{0}' is invalid. Filters must start with '+' or '-'.</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="LoadingReport" xml:space="preserve">
    <value>Loading report '{0}'</value>
  </data>
  <data name="Method" xml:space="preserve">
    <value>Method</value>
  </data>
  <data name="Metrics" xml:space="preserve">
    <value>Metrics</value>
  </data>
  <data name="NoAssembliesHaveBeenCovered" xml:space="preserve">
    <value>No assemblies have been covered.</value>
  </data>
  <data name="NoFilesFound" xml:space="preserve">
    <value>No files found. This usually happens if a file isn't covered by a test or the class does not contain any sequence points (e.g. a class that only contains auto properties).</value>
  </data>
  <data name="NoReportFiles" xml:space="preserve">
    <value>No report files specified.</value>
  </data>
  <data name="NoTargetDirectory" xml:space="preserve">
    <value>No target directory specified.</value>
  </data>
  <data name="NotExistingReportFile" xml:space="preserve">
    <value>The report file '{0}' does not exist.</value>
  </data>
  <data name="Parser" xml:space="preserve">
    <value>Parser:</value>
  </data>
  <data name="PreprocessingReport" xml:space="preserve">
    <value>Preprocessing report</value>
  </data>
  <data name="ReportGenerationTook" xml:space="preserve">
    <value>Report generation took {0} seconds</value>
  </data>
  <data name="ReportNotSaved" xml:space="preserve">
    <value>Report '{0}' could not be saved: {1}</value>
  </data>
  <data name="SourceDirectoryDoesNotExist" xml:space="preserve">
    <value>The source code directory '{0}' does not exist.</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="TargetDirectoryCouldNotBeCreated" xml:space="preserve">
    <value>The target directory '{0}' could not be created: {1}</value>
  </data>
  <data name="TotalLines" xml:space="preserve">
    <value>Total lines:</value>
  </data>
  <data name="UnknownReportType" xml:space="preserve">
    <value>Unknown report type.</value>
  </data>
  <data name="UnknownVerbosityLevel" xml:space="preserve">
    <value>Unknown verbosity level.</value>
  </data>
</root>